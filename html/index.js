// Cognito and AWS Configuration
// Configuration will be loaded from config.js (generated by Terraform)
let cognitoConfig = null;

// Initialize the application
document.addEventListener("DOMContentLoaded", function () {
  console.log("DOM Content Loaded - Starting initialization");

  // Wait for config to be loaded
  if (typeof window.COGNITO_CONFIG === "undefined") {
    console.error("Configuration not loaded! Make sure config.js is loaded.");
    showError("Configuration not loaded. Please refresh the page.");
    return;
  }

  // Use the dynamically loaded configuration
  cognitoConfig = window.COGNITO_CONFIG;
  console.log("Using dynamic configuration:", cognitoConfig);

  // Initialize AWS SDK with the dynamic region
  AWS.config.region = cognitoConfig.region;

  // Global variables
  let currentUser = null;
  let photos = [];

  // Check if required libraries are loaded
  if (typeof AWS === "undefined") {
    console.error("AWS SDK not loaded!");
    showError("AWS SDK failed to load. Please refresh the page.");
    return;
  }

  if (typeof AmazonCognitoIdentity === "undefined") {
    console.error("Amazon Cognito Identity SDK not loaded!");
    showError("Amazon Cognito SDK failed to load. Please refresh the page.");
    return;
  }

  console.log("All required SDKs loaded successfully");

  checkAuthStatus();
  setupEventListeners();
  setupAuthEventListeners();
});

function setupEventListeners() {
  // File upload handling
  const fileInput = document.getElementById("imageUpload");
  if (fileInput) {
    fileInput.addEventListener("change", handleFileSelect);
  }

  // Upload form submission
  const uploadForm = document.querySelector("#upload-section form");
  if (uploadForm) {
    uploadForm.addEventListener("submit", handleUpload);
  }

  // Drag and drop for file upload
  setupDragAndDrop();
}

function setupAuthEventListeners() {
  console.log("Setting up auth event listeners...");

  // Login form submission
  const loginSubmit = document.getElementById("loginSubmit");
  if (loginSubmit) {
    console.log("Login submit button found, adding event listener");
    loginSubmit.addEventListener("click", handleLogin);
  } else {
    console.log("Login submit button not found");
  }

  // Register form submission
  const registerSubmit = document.getElementById("registerSubmit");
  if (registerSubmit) {
    console.log("Register submit button found, adding event listener");
    registerSubmit.addEventListener("click", handleRegister);
  } else {
    console.log("Register submit button not found");
  }

  // Verification form submission
  const verifySubmit = document.getElementById("verifySubmit");
  if (verifySubmit) {
    console.log("Verify submit button found, adding event listener");
    verifySubmit.addEventListener("click", handleVerification);
  } else {
    console.log("Verify submit button not found");
  }

  // Resend code
  const resendCode = document.getElementById("resendCode");
  if (resendCode) {
    console.log("Resend code button found, adding event listener");
    resendCode.addEventListener("click", handleResendCode);
  } else {
    console.log("Resend code button not found");
  }

  console.log("Auth event listeners setup complete");
}

// Cognito Authentication Functions
let cognitoUser = null;
let cognitoUserPool = null;

// Initialize Cognito User Pool
function initializeCognito() {
  const poolData = {
    UserPoolId: cognitoConfig.userPoolId,
    ClientId: cognitoConfig.userPoolWebClientId,
  };
  cognitoUserPool = new AmazonCognitoIdentity.CognitoUserPool(poolData);
}

async function handleLogin(event) {
  event.preventDefault();

  const email = document.getElementById("loginEmail").value;
  const password = document.getElementById("loginPassword").value;

  if (!email || !password) {
    showLoginError("Please enter both email and password.");
    return;
  }

  try {
    showLoginLoading(true);
    hideLoginError();

    // Initialize Cognito if not done
    if (!cognitoUserPool) {
      initializeCognito();
    }

    const authenticationData = {
      Username: email,
      Password: password,
    };

    const authenticationDetails =
      new AmazonCognitoIdentity.AuthenticationDetails(authenticationData);

    const userData = {
      Username: email,
      Pool: cognitoUserPool,
    };

    cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);

    cognitoUser.authenticateUser(authenticationDetails, {
      onSuccess: function (result) {
        console.log("Login successful:", result);

        // Get user attributes
        cognitoUser.getUserAttributes(function (err, attributes) {
          if (err) {
            console.error("Error getting user attributes:", err);
            showLoginError("Login successful but failed to get user details.");
            return;
          }

          // Convert attributes to user object
          const user = {};
          attributes.forEach((attr) => {
            user[attr.getName()] = attr.getValue();
          });

          // Add tokens to user object
          user.accessToken = result.getAccessToken().getJwtToken();
          user.idToken = result.getIdToken().getJwtToken();
          user.refreshToken = result.getRefreshToken().getToken();

          // Store user info
          localStorage.setItem("accessToken", user.accessToken);
          localStorage.setItem("idToken", user.idToken);
          localStorage.setItem("refreshToken", user.refreshToken);
          localStorage.setItem("userInfo", JSON.stringify(user));

          // Display logged in user
          displayLoggedInUser(user);
          loadPhotos();

          // Close modal
          const modal = bootstrap.Modal.getInstance(
            document.getElementById("loginModal")
          );
          modal.hide();

          showSuccess("Login successful! Welcome back.");
        });

        showLoginLoading(false);
      },

      onFailure: function (err) {
        console.error("Login failed:", err);
        showLoginError(err.message || "Login failed. Please try again.");
        showLoginLoading(false);
      },

      newPasswordRequired: function (userAttributes, requiredAttributes) {
        console.log("New password required");
        showLoginError("New password required. Please contact administrator.");
        showLoginLoading(false);
      },
    });
  } catch (error) {
    console.error("Login error:", error);
    showLoginError("An error occurred during login. Please try again.");
    showLoginLoading(false);
  }
}

async function handleRegister(event) {
  console.log("handleRegister called", event);
  event.preventDefault();

  const firstName = document.getElementById("registerFirstName").value;
  const lastName = document.getElementById("registerLastName").value;
  const email = document.getElementById("registerEmail").value;
  const password = document.getElementById("registerPassword").value;
  const confirmPassword = document.getElementById("confirmPassword").value;
  const role = document.getElementById("userRole").value;
  const agreeTerms = document.getElementById("agreeTerms").checked;

  console.log("Registration form data:", {
    firstName,
    lastName,
    email,
    role,
    agreeTerms,
  });

  // Validation
  if (!firstName || !lastName || !email || !password || !confirmPassword) {
    showRegisterError("Please fill in all required fields.");
    return;
  }

  if (password !== confirmPassword) {
    showRegisterError("Passwords do not match.");
    return;
  }

  if (password.length < 8) {
    showRegisterError("Password must be at least 8 characters long.");
    return;
  }

  if (!agreeTerms) {
    showRegisterError(
      "Please agree to the Terms of Service and Privacy Policy."
    );
    return;
  }

  try {
    showRegisterLoading(true);
    hideRegisterError();

    // Initialize Cognito if not done
    if (!cognitoUserPool) {
      initializeCognito();
    }

    const attributeList = [];

    // Email attribute
    attributeList.push(
      new AmazonCognitoIdentity.CognitoUserAttribute({
        Name: "email",
        Value: email,
      })
    );

    // Given name attribute
    attributeList.push(
      new AmazonCognitoIdentity.CognitoUserAttribute({
        Name: "given_name",
        Value: firstName,
      })
    );

    // Family name attribute
    attributeList.push(
      new AmazonCognitoIdentity.CognitoUserAttribute({
        Name: "family_name",
        Value: lastName,
      })
    );

    // Custom role attribute (temporarily disabled until User Pool schema is fixed)
    // attributeList.push(
    //   new AmazonCognitoIdentity.CognitoUserAttribute({
    //     Name: "custom:role",
    //     Value: role,
    //   })
    // );

    cognitoUserPool.signUp(
      email,
      password,
      attributeList,
      null,
      function (err, result) {
        if (err) {
          console.error("Registration failed:", err);
          showRegisterError(
            err.message || "Registration failed. Please try again."
          );
          showRegisterLoading(false);
          return;
        }

        console.log("Registration successful:", result);
        cognitoUser = result.user;

        // Store email for verification
        localStorage.setItem("pendingVerificationEmail", email);

        // Close register modal and open verification modal
        const registerModal = bootstrap.Modal.getInstance(
          document.getElementById("registerModal")
        );
        const verificationModal = new bootstrap.Modal(
          document.getElementById("verificationModal")
        );

        registerModal.hide();
        verificationModal.show();

        showRegisterLoading(false);
        showSuccess(
          "Registration successful! Please check your email for verification code."
        );
      }
    );
  } catch (error) {
    console.error("Registration error:", error);
    showRegisterError(
      "An error occurred during registration. Please try again."
    );
    showRegisterLoading(false);
  }
}

async function handleVerification(event) {
  event.preventDefault();

  const verificationCode = document.getElementById("verificationCode").value;
  const email = localStorage.getItem("pendingVerificationEmail");

  if (!verificationCode) {
    showVerificationError("Please enter the verification code.");
    return;
  }

  if (!cognitoUser && email) {
    // Recreate cognito user if needed
    const userData = {
      Username: email,
      Pool: cognitoUserPool,
    };
    cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);
  }

  if (!cognitoUser) {
    showVerificationError("User session expired. Please register again.");
    return;
  }

  try {
    cognitoUser.confirmRegistration(
      verificationCode,
      true,
      function (err, result) {
        if (err) {
          console.error("Verification failed:", err);
          showVerificationError(
            err.message || "Verification failed. Please try again."
          );
          return;
        }

        console.log("Verification successful:", result);

        // Close verification modal
        const modal = bootstrap.Modal.getInstance(
          document.getElementById("verificationModal")
        );
        modal.hide();

        // Clear pending verification
        localStorage.removeItem("pendingVerificationEmail");

        // Show login modal
        const loginModal = new bootstrap.Modal(
          document.getElementById("loginModal")
        );
        loginModal.show();

        showSuccess(
          "Email verified successfully! Please login with your credentials."
        );
      }
    );
  } catch (error) {
    console.error("Verification error:", error);
    showVerificationError(
      "An error occurred during verification. Please try again."
    );
  }
}

async function handleResendCode(event) {
  event.preventDefault();

  const email = localStorage.getItem("pendingVerificationEmail");

  if (!cognitoUser && email) {
    const userData = {
      Username: email,
      Pool: cognitoUserPool,
    };
    cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);
  }

  if (!cognitoUser) {
    showVerificationError("User session expired. Please register again.");
    return;
  }

  try {
    cognitoUser.resendConfirmationCode(function (err, result) {
      if (err) {
        console.error("Resend failed:", err);
        showVerificationError(
          err.message || "Failed to resend code. Please try again."
        );
        return;
      }

      console.log("Code resent:", result);
      showSuccess("Verification code resent! Please check your email.");
    });
  } catch (error) {
    console.error("Resend error:", error);
    showVerificationError(
      "An error occurred while resending code. Please try again."
    );
  }
}

// Modal helper functions
function switchToRegister() {
  console.log("switchToRegister called");
  try {
    const loginModal = bootstrap.Modal.getInstance(
      document.getElementById("loginModal")
    );
    const registerModal = new bootstrap.Modal(
      document.getElementById("registerModal")
    );

    if (loginModal) {
      loginModal.hide();
    }
    registerModal.show();
    console.log("Switched to register modal");
  } catch (error) {
    console.error("Error switching to register modal:", error);
  }
}

function switchToLogin() {
  console.log("switchToLogin called");
  try {
    const registerModal = bootstrap.Modal.getInstance(
      document.getElementById("registerModal")
    );
    const loginModal = new bootstrap.Modal(
      document.getElementById("loginModal")
    );

    if (registerModal) {
      registerModal.hide();
    }
    loginModal.show();
    console.log("Switched to login modal");
  } catch (error) {
    console.error("Error switching to login modal:", error);
  }
}

// Error and loading display functions
function showLoginError(message) {
  const errorDiv = document.getElementById("loginError");
  errorDiv.textContent = message;
  errorDiv.classList.remove("d-none");
}

function hideLoginError() {
  const errorDiv = document.getElementById("loginError");
  errorDiv.classList.add("d-none");
}

function showLoginLoading(show) {
  const loadingDiv = document.getElementById("loginLoading");
  const submitBtn = document.getElementById("loginSubmit");

  if (show) {
    loadingDiv.classList.remove("d-none");
    submitBtn.disabled = true;
  } else {
    loadingDiv.classList.add("d-none");
    submitBtn.disabled = false;
  }
}

function showRegisterError(message) {
  const errorDiv = document.getElementById("registerError");
  errorDiv.textContent = message;
  errorDiv.classList.remove("d-none");
}

function hideRegisterError() {
  const errorDiv = document.getElementById("registerError");
  errorDiv.classList.add("d-none");
}

function showRegisterLoading(show) {
  const loadingDiv = document.getElementById("registerLoading");
  const submitBtn = document.getElementById("registerSubmit");

  if (show) {
    loadingDiv.classList.remove("d-none");
    submitBtn.disabled = true;
  } else {
    loadingDiv.classList.add("d-none");
    submitBtn.disabled = false;
  }
}

function showVerificationError(message) {
  const errorDiv = document.getElementById("verificationError");
  errorDiv.textContent = message;
  errorDiv.classList.remove("d-none");
}

// Function to show login modal (for debugging)
function showLoginModal() {
  console.log("Showing login modal");
  const loginModal = new bootstrap.Modal(document.getElementById("loginModal"));
  loginModal.show();
}

// Function to show register modal (for debugging)
function showRegisterModal() {
  console.log("Showing register modal");
  const registerModal = new bootstrap.Modal(
    document.getElementById("registerModal")
  );
  registerModal.show();
}

function checkAuthStatus() {
  // Check if we have stored tokens
  const accessToken = localStorage.getItem("accessToken");
  if (accessToken) {
    validateAndDisplayUser(accessToken);
  }
}

async function exchangeCodeForTokens(code) {
  try {
    showLoading("Authenticating...");

    // In production, this should be done through your backend for security
    // For now, we'll simulate the token exchange
    const tokenEndpoint = `https://${cognitoConfig.authDomain}/oauth2/token`;

    const tokenResponse = await fetch(tokenEndpoint, {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
      },
      body: new URLSearchParams({
        grant_type: "authorization_code",
        client_id: cognitoConfig.userPoolWebClientId,
        code: code,
        redirect_uri: window.location.origin,
      }),
    });

    if (tokenResponse.ok) {
      const tokens = await tokenResponse.json();

      // Store tokens
      localStorage.setItem("accessToken", tokens.access_token);
      localStorage.setItem("idToken", tokens.id_token);
      localStorage.setItem("refreshToken", tokens.refresh_token);

      // Get user info from ID token
      const userInfo = parseJWT(tokens.id_token);
      localStorage.setItem("userInfo", JSON.stringify(userInfo));

      // Display user
      displayLoggedInUser(userInfo);

      // Load photos
      loadPhotos();
    } else {
      throw new Error("Failed to exchange code for tokens");
    }

    // Clean up URL
    window.history.replaceState({}, document.title, window.location.pathname);
    hideLoading();
  } catch (error) {
    console.error("Error exchanging code for tokens:", error);
    showError("Authentication failed. Please try again.");
    hideLoading();
  }
}

function parseJWT(token) {
  try {
    const base64Url = token.split(".")[1];
    const base64 = base64Url.replace(/-/g, "+").replace(/_/g, "/");
    const jsonPayload = decodeURIComponent(
      atob(base64)
        .split("")
        .map(function (c) {
          return "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2);
        })
        .join("")
    );

    return JSON.parse(jsonPayload);
  } catch (error) {
    console.error("Error parsing JWT:", error);
    return null;
  }
}

function validateAndDisplayUser(accessToken) {
  const userInfo = localStorage.getItem("userInfo");
  if (userInfo) {
    const user = JSON.parse(userInfo);
    displayLoggedInUser(user);
    loadPhotos();
  }
}

function displayLoggedInUser(user) {
  currentUser = user;

  // Add logged-in class to body
  document.body.classList.add("logged-in");

  // Update user avatar with first letter of first name
  const userAvatar = document.getElementById("userAvatar");
  const firstName =
    user.given_name ||
    (user.name && user.name.split(" ")[0]) ||
    (user.email && user.email.charAt(0)) ||
    "U";
  userAvatar.textContent = firstName.charAt(0).toUpperCase();

  // Update user info in dropdown
  document.getElementById("userName").textContent =
    user.name ||
    (user.given_name || "") + " " + (user.family_name || "") ||
    "User";
  document.getElementById("userEmail").textContent = user.email || "";

  // Update role badge
  const roleElement = document.getElementById("userRole");
  const role =
    user["custom:role"] ||
    (user["cognito:groups"] && user["cognito:groups"][0]) ||
    "customer";
  roleElement.textContent = role.charAt(0).toUpperCase() + role.slice(1);

  // Set role badge color
  roleElement.className = "badge role-" + role.toLowerCase();

  // Show admin panel if user is admin
  if (role.toLowerCase() === "admin") {
    showAdminPanel();
  }

  console.log("User logged in:", user);
}

function showAdminPanel() {
  const uploadSection = document.getElementById("upload-section");
  const adminPanel = document.createElement("div");
  adminPanel.className = "admin-panel";
  adminPanel.innerHTML = `
        <h5><i class="fas fa-crown"></i> Admin Panel</h5>
        <p>As an admin, you can view all user photos and manage the system.</p>
        <div class="admin-controls">
            <button class="btn btn-warning btn-sm" onclick="loadAllPhotos()">View All Photos</button>
            <button class="btn btn-info btn-sm" onclick="loadUserStats()">User Statistics</button>
        </div>
    `;
  uploadSection.parentNode.insertBefore(adminPanel, uploadSection);
}

function logout() {
  // Clear stored tokens and user data
  localStorage.removeItem("accessToken");
  localStorage.removeItem("idToken");
  localStorage.removeItem("refreshToken");
  localStorage.removeItem("userInfo");

  // Reset global variables
  currentUser = null;
  photos = [];

  // Remove logged-in class
  document.body.classList.remove("logged-in");

  // Clear photo gallery
  clearPhotoGallery();

  // Remove admin panel if it exists
  const adminPanel = document.querySelector(".admin-panel");
  if (adminPanel) {
    adminPanel.remove();
  }

  showSuccess("Logged out successfully!");
}

// Photo Management Functions
function handleFileSelect(event) {
  const files = event.target.files;
  if (files.length > 0) {
    previewFile(files[0]);
  }
}

function handleUpload(event) {
  event.preventDefault();

  if (!currentUser) {
    showError("Please log in to upload photos.");
    return;
  }

  const fileInput = document.getElementById("imageUpload");
  const file = fileInput.files[0];

  if (!file) {
    showError("Please select a file to upload.");
    return;
  }

  uploadPhoto(file);
}

function previewFile(file) {
  const reader = new FileReader();
  reader.onload = function (e) {
    // Create preview image
    const preview = document.createElement("img");
    preview.src = e.target.result;
    preview.style.maxWidth = "200px";
    preview.style.maxHeight = "200px";
    preview.style.marginTop = "10px";

    // Remove existing preview
    const existingPreview = document.querySelector("#upload-section .preview");
    if (existingPreview) {
      existingPreview.remove();
    }

    // Add new preview
    preview.className = "preview";
    document.querySelector("#upload-section form").appendChild(preview);
  };
  reader.readAsDataURL(file);
}

async function uploadPhoto(file) {
  try {
    showLoading("Uploading photo...");

    // Get description from form if it exists
    const descriptionInput = document.getElementById("photoDescription");
    const description = descriptionInput ? descriptionInput.value : "";

    // Simulate photo upload and create photo object
    const photoData = {
      id: generateUUID(),
      fileName: file.name,
      size: file.size,
      type: file.type,
      description: description,
      uploadedBy: currentUser.email,
      uploadedAt: new Date().toISOString(),
      url: URL.createObjectURL(file), // Create a local URL for the file
    };

    // Simulate API call delay
    await new Promise((resolve) => setTimeout(resolve, 1500));

    // Add to local photos array (simulating DynamoDB storage)
    photos.push(photoData);
    localStorage.setItem("photos", JSON.stringify(photos));

    showSuccess("Photo uploaded successfully!");

    // Clear form
    document.getElementById("imageUpload").value = "";
    if (descriptionInput) descriptionInput.value = "";
    const preview = document.querySelector("#upload-section .preview");
    if (preview) preview.remove();

    // Refresh photo gallery
    displayPhotos();

    hideLoading();
  } catch (error) {
    console.error("Error uploading photo:", error);
    showError(`Failed to upload photo: ${error.message}`);
    hideLoading();
  }
}

async function loadPhotos() {
  try {
    if (!currentUser) {
      clearPhotoGallery();
      return;
    }

    showLoading("Loading photos...");

    // Load photos from localStorage (simulating API call)
    const storedPhotos = localStorage.getItem("photos");
    if (storedPhotos) {
      photos = JSON.parse(storedPhotos);
    } else {
      photos = [];
    }

    // Simulate API call delay
    await new Promise((resolve) => setTimeout(resolve, 500));

    displayPhotos();
    hideLoading();
  } catch (error) {
    console.error("Error loading photos:", error);
    showError(`Failed to load photos: ${error.message}`);
    hideLoading();
  }
}

function displayPhotos() {
  const photoGallery = getOrCreatePhotoGallery();
  photoGallery.innerHTML = "";

  if (!currentUser) {
    return;
  }

  // Filter photos based on user role
  let photosToShow = photos;
  const userRole =
    currentUser["custom:role"] ||
    (currentUser["cognito:groups"] && currentUser["cognito:groups"][0]) ||
    "customer";

  if (userRole.toLowerCase() !== "admin") {
    // Non-admin users can only see their own photos
    photosToShow = photos.filter(
      (photo) => photo.uploadedBy === currentUser.email
    );
  }

  if (photosToShow.length === 0) {
    photoGallery.innerHTML =
      '<p class="text-center text-muted">No photos to display.</p>';
    return;
  }

  photosToShow.forEach((photo) => {
    const photoCard = createPhotoCard(photo);
    photoGallery.appendChild(photoCard);
  });
}

function createPhotoCard(photo) {
  const card = document.createElement("div");
  card.className = "photo-card";

  const uploadedByCurrentUser =
    photo.uploadedBy === (currentUser && currentUser.email);
  const userRole =
    (currentUser && currentUser["custom:role"]) ||
    (currentUser &&
      currentUser["cognito:groups"] &&
      currentUser["cognito:groups"][0]) ||
    "customer";
  const canDelete = uploadedByCurrentUser || userRole.toLowerCase() === "admin";

  card.innerHTML = `
        <img src="${photo.url}" alt="${photo.fileName}" loading="lazy">
        <div class="photo-card-body">
            <div class="photo-card-title">${photo.fileName}</div>
            <div class="photo-card-meta">
                <small>Uploaded by: ${photo.uploadedBy}</small><br>
                <small>Date: ${new Date(
                  photo.uploadedAt
                ).toLocaleDateString()}</small><br>
                <small>Size: ${formatFileSize(photo.size)}</small>
                ${
                  canDelete
                    ? `<br><button class="btn btn-danger btn-sm mt-2" onclick="deletePhoto('${photo.id}')">Delete</button>`
                    : ""
                }
            </div>
        </div>
    `;

  return card;
}

function deletePhoto(photoId) {
  if (confirm("Are you sure you want to delete this photo?")) {
    photos = photos.filter((photo) => photo.id !== photoId);
    localStorage.setItem("photos", JSON.stringify(photos));
    displayPhotos();
    showSuccess("Photo deleted successfully!");
  }
}

function getOrCreatePhotoGallery() {
  let photoGallery = document.getElementById("photoGallery");
  if (!photoGallery) {
    const uploadSection = document.getElementById("upload-section");
    const gallerySection = document.createElement("section");
    gallerySection.className = "photo-gallery";
    gallerySection.innerHTML = `
            <div class="container">
                <h2 class="text-center mb-4">Photo Gallery</h2>
                <div id="photoGallery" class="photo-grid"></div>
            </div>
        `;
    uploadSection.parentNode.insertBefore(
      gallerySection,
      uploadSection.nextSibling
    );
    photoGallery = document.getElementById("photoGallery");
  }
  return photoGallery;
}

function clearPhotoGallery() {
  const photoGallery = document.getElementById("photoGallery");
  if (photoGallery) {
    photoGallery.innerHTML = "";
  }
}

// Admin Functions
function loadAllPhotos() {
  displayPhotos(); // Since we're filtering in displayPhotos, this will show all for admin
  showSuccess("Showing all user photos.");
}

function loadUserStats() {
  const userPhotoCount = {};
  photos.forEach((photo) => {
    userPhotoCount[photo.uploadedBy] =
      (userPhotoCount[photo.uploadedBy] || 0) + 1;
  });

  const statsHtml = Object.entries(userPhotoCount)
    .map(([user, count]) => `<li>${user}: ${count} photos</li>`)
    .join("");

  const statsModal = document.createElement("div");
  statsModal.innerHTML = `
        <div class="modal fade" id="statsModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">User Statistics</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <h6>Photos per user:</h6>
                        <ul>${statsHtml}</ul>
                        <p><strong>Total photos: ${photos.length}</strong></p>
                    </div>
                </div>
            </div>
        </div>
    `;

  document.body.appendChild(statsModal);
  const modal = new bootstrap.Modal(document.getElementById("statsModal"));
  modal.show();

  // Clean up modal after closing
  document
    .getElementById("statsModal")
    .addEventListener("hidden.bs.modal", function () {
      this.remove();
    });
}

// Helper function to convert file to base64
function fileToBase64(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result);
    reader.onerror = (error) => reject(error);
  });
}

// Utility Functions
function setupDragAndDrop() {
  const uploadArea = document.querySelector("#upload-section");
  if (!uploadArea) return;

  ["dragenter", "dragover", "dragleave", "drop"].forEach((eventName) => {
    uploadArea.addEventListener(eventName, preventDefaults, false);
  });

  function preventDefaults(e) {
    e.preventDefault();
    e.stopPropagation();
  }

  ["dragenter", "dragover"].forEach((eventName) => {
    uploadArea.addEventListener(eventName, highlight, false);
  });

  ["dragleave", "drop"].forEach((eventName) => {
    uploadArea.addEventListener(eventName, unhighlight, false);
  });

  function highlight(e) {
    uploadArea.classList.add("dragover");
  }

  function unhighlight(e) {
    uploadArea.classList.remove("dragover");
  }

  uploadArea.addEventListener("drop", handleDrop, false);

  function handleDrop(e) {
    const dt = e.dataTransfer;
    const files = dt.files;

    if (files.length > 0) {
      document.getElementById("imageUpload").files = files;
      previewFile(files[0]);
    }
  }
}

function generateUUID() {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
    const r = (Math.random() * 16) | 0;
    const v = c == "x" ? r : (r & 0x3) | 0x8;
    return v.toString(16);
  });
}

function formatFileSize(bytes) {
  if (bytes === 0) return "0 Bytes";
  const k = 1024;
  const sizes = ["Bytes", "KB", "MB", "GB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
}

function showLoading(message) {
  const loadingDiv = document.createElement("div");
  loadingDiv.id = "loadingMessage";
  loadingDiv.className = "loading";
  loadingDiv.innerHTML = `
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">${message}</p>
    `;

  const existingLoading = document.getElementById("loadingMessage");
  if (existingLoading) existingLoading.remove();

  document.querySelector(".container").appendChild(loadingDiv);
}

function hideLoading() {
  const loadingDiv = document.getElementById("loadingMessage");
  if (loadingDiv) loadingDiv.remove();
}

function showError(message) {
  showMessage(message, "error-message");
}

function showSuccess(message) {
  showMessage(message, "success-message");
}

function showMessage(message, className) {
  const messageDiv = document.createElement("div");
  messageDiv.className = className;
  messageDiv.textContent = message;

  const container = document.querySelector(".container");
  container.insertBefore(messageDiv, container.firstChild);

  // Auto-remove after 5 seconds
  setTimeout(() => {
    if (messageDiv.parentNode) {
      messageDiv.remove();
    }
  }, 5000);
}

// Development helper functions (remove in production)
function simulateLogin(userType) {
  const users = {
    admin: {
      email: "admin@company.com",
      name: "Admin User",
      given_name: "Admin",
      family_name: "User",
      "custom:role": "admin",
    },
    manager: {
      email: "manager@company.com",
      name: "Alice Johnson",
      given_name: "Alice",
      family_name: "Johnson",
      "custom:role": "manager",
    },
    staff: {
      email: "staff@company.com",
      name: "Bob Smith",
      given_name: "Bob",
      family_name: "Smith",
      "custom:role": "staff",
    },
    customer: {
      email: "customer@email.com",
      name: "Charlie Brown",
      given_name: "Charlie",
      family_name: "Brown",
      "custom:role": "customer",
    },
  };

  const user = users[userType];
  localStorage.setItem("accessToken", "mock_access_token");
  localStorage.setItem("userInfo", JSON.stringify(user));
  displayLoggedInUser(user);
  loadPhotos();
}

// Test functions for debugging
function testModals() {
  console.log("Testing modals...");

  // Test if modals exist
  const loginModal = document.getElementById("loginModal");
  const registerModal = document.getElementById("registerModal");

  console.log("Login modal found:", !!loginModal);
  console.log("Register modal found:", !!registerModal);

  // Test if Bootstrap is loaded
  console.log(
    "Bootstrap Modal available:",
    typeof bootstrap !== "undefined" && !!bootstrap.Modal
  );

  // Test if buttons exist
  const registerSubmit = document.getElementById("registerSubmit");
  const loginSubmit = document.getElementById("loginSubmit");

  console.log("Register submit button found:", !!registerSubmit);
  console.log("Login submit button found:", !!loginSubmit);

  // Test if Cognito SDK is loaded
  console.log("AWS SDK loaded:", typeof AWS !== "undefined");
  console.log(
    "Cognito SDK loaded:",
    typeof AmazonCognitoIdentity !== "undefined"
  );

  return {
    loginModal: !!loginModal,
    registerModal: !!registerModal,
    bootstrap: typeof bootstrap !== "undefined",
    registerSubmit: !!registerSubmit,
    loginSubmit: !!loginSubmit,
    awsSDK: typeof AWS !== "undefined",
    cognitoSDK: typeof AmazonCognitoIdentity !== "undefined",
  };
}

function forceShowRegisterModal() {
  console.log("Force showing register modal");
  const registerModal = new bootstrap.Modal(
    document.getElementById("registerModal")
  );
  registerModal.show();
}

function forceShowLoginModal() {
  console.log("Force showing login modal");
  const loginModal = new bootstrap.Modal(document.getElementById("loginModal"));
  loginModal.show();
}

// Expose functions for console testing
window.simulateLogin = simulateLogin;
window.loadPhotos = loadPhotos;
window.clearAllData = function () {
  localStorage.clear();
  location.reload();
};
window.testModals = testModals;
window.forceShowRegisterModal = forceShowRegisterModal;
window.forceShowLoginModal = forceShowLoginModal;
window.switchToRegister = switchToRegister;
window.switchToLogin = switchToLogin;
